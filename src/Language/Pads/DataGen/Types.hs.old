module Language.Pads.DataGen.Types where

import System.Random.MWC
import Control.Monad.Reader
import Language.Pads.Syntax
import Data.IORef

--                       Name      AST
type PadsDescription = ([Char], PadsDecl)

data Chunk = CharChunk   Char
           | BinaryChunk Integer Int -- Value, number of significant bits of value
    deriving Show

data Val = CharVal Char
         | IntVal Integer
    deriving Show

type ValEnv = [(String, Val)]

data MEnv = MEnv { genIO     :: GenIO
                 , valEnvRef :: IORef ValEnv
                 }

type M = ReaderT MEnv IO
